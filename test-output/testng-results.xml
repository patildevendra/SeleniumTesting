<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" ignored="1" total="6" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="Main Test Suite" duration-ms="497" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
    <groups>
    </groups>
    <test name="Extent Report Test" duration-ms="497" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
      <class name="sample.TestNg3">
        <test-method status="PASS" signature="startReport()[pri:0, instance:sample.TestNg3@5f341870]" name="startReport" is-config="true" duration-ms="220" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method status="PASS" signature="testCase1()[pri:0, instance:sample.TestNg3@5f341870]" name="testCase1" duration-ms="7" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase1 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:sample.TestNg3@5f341870]" name="getResult" is-config="true" duration-ms="9" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase1 status=SUCCESS method=TestNg3.testCase1()[pri:0, instance:sample.TestNg3@5f341870] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="testCase2()[pri:0, instance:sample.TestNg3@5f341870]" name="testCase2" duration-ms="1" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:sample.TestNg3@5f341870]" name="getResult" is-config="true" duration-ms="1" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase2 status=SUCCESS method=TestNg3.testCase2()[pri:0, instance:sample.TestNg3@5f341870] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="testCase3()[pri:0, instance:sample.TestNg3@5f341870]" name="testCase3" duration-ms="1" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase3 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:sample.TestNg3@5f341870]" name="getResult" is-config="true" duration-ms="1" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase3 status=SUCCESS method=TestNg3.testCase3()[pri:0, instance:sample.TestNg3@5f341870] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="FAIL" signature="testCase4()[pri:0, instance:sample.TestNg3@5f341870]" name="testCase4" duration-ms="1" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at sample.TestNg3.testCase4(TestNg3.java:74)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase4 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:sample.TestNg3@5f341870]" name="getResult" is-config="true" duration-ms="6" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase4 status=FAILURE method=TestNg3.testCase4()[pri:0, instance:sample.TestNg3@5f341870] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="SKIP" signature="testCase5()[pri:0, instance:sample.TestNg3@5f341870]" name="testCase5" duration-ms="1" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[Skipping this test with exception]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: Skipping this test with exception
at sample.TestNg3.testCase5(TestNg3.java:80)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase5 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:sample.TestNg3@5f341870]" name="getResult" is-config="true" duration-ms="1" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase5 status=SKIP method=TestNg3.testCase5()[pri:0, instance:sample.TestNg3@5f341870] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:sample.TestNg3@5f341870]" name="tearDown" is-config="true" duration-ms="232" started-at="2018-09-28T17:59:55Z" finished-at="2018-09-28T17:59:55Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- sample.TestNg3 -->
    </test> <!-- Extent Report Test -->
  </suite> <!-- Main Test Suite -->
</testng-results>
